@using Microsoft.AspNetCore.Identity
@using MinecraftSpelunking.Application.AspNetCore.Common.Dtos
@using MinecraftSpelunking.Application.AspNetCore.Common.Services
@using MinecraftSpelunking.Application.Identity.Common.Dtos
@using MinecraftSpelunking.Application.Identity.Common.Enums
@using MinecraftSpelunking.Application.Identity.Common.Services
@using MinecraftSpelunking.Application.Minecraft.Common.Services
@using MinecraftSpelunking.Domain.Identity.Common.Enums
@using MinecraftSpelunking.Domain.Minecraft.Common.Entities
@using MinecraftSpelunking.Domain.Minecraft.Common.Enums
@using MinecraftSpelunking.Presentation.WebServer.Attributes
@using Microsoft.AspNetCore.Antiforgery;
@using System.ComponentModel.DataAnnotations
@using System.Net

@attribute [RequireAntiforgeryToken]
@attribute [Route(Constants.Routes.AddressBlocks.BulkRequestSubNetworks)]

@inject IStatusMessageApplicationService StatusMessages;
@inject IAddressBlockApplicationService AddressBlocks;

<PageTitle>Login</PageTitle>

<h1>Bulk Request Subnetworks</h1>

<div class="row">
    <div class="col-md-4">
        <EditForm Model="BulkReserveNetworkInput" OnValidSubmit="BulkReserveSubNets" FormName="bulk-reserve-subnets">
            <DataAnnotationsValidator />
            <h2>Bulk reserve subnetworks</h2>
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
                <InputTextArea @bind-Value="BulkReserveNetworkInput.Networks" class="form-control" autocomplete="networks" aria-required="true" placeholder="0.0.0.0/20" />
                <label for="network">Networks</label>
                <ValidationMessage For="() => BulkReserveNetworkInput.Networks" class="text-danger" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Reserve</button>
        </EditForm>
    </div>
</div>

@code {
    private SignInResultDto? Result;

    [SupplyParameterFromForm]
    private BulkReserveNetworkInputModel BulkReserveNetworkInput { get; set; } = new();


    private async Task BulkReserveSubNets()
    {
        int rows = 0;
        var notations = this.BulkReserveNetworkInput.Networks.Split('\n');

        foreach (string notation in notations)
        {
            if (IPNetwork2.TryParse(notation.Replace("\r", ""), out IPNetwork2 network) == false)
            {
                this.StatusMessages.Add(StatusMessageDto.Error("Unable to parse input"));
            }

            if(network.Cidr == AddressBlock.CIDR)
            {
                rows += await this.AddressBlocks.BulkSetStatusAsync(new[] { network }, AddressBlockStatusEnum.Requested);
            }
            else if(network.Cidr > AddressBlock.CIDR)
            {
                var supernetwork = new IPNetwork2(network.Network, AddressBlock.CIDR);
                rows += await this.AddressBlocks.BulkSetStatusAsync(new[] { supernetwork }, AddressBlockStatusEnum.Requested);
            }
            else if (network.Cidr < AddressBlock.CIDR)
            {
                try
                {
                    IPNetworkCollection networks = network.Subnet(AddressBlock.CIDR);

                    rows += await this.AddressBlocks.BulkSetStatusAsync(networks, AddressBlockStatusEnum.Requested);
                }
                catch
                {
                    this.StatusMessages.Add(StatusMessageDto.Error($"Exception calculating subnets for {notation}"));
                }
            }
        }

        if(rows > 0)
        {
            this.StatusMessages.Add(StatusMessageDto.Success($"{rows} updated."));
        }
    }

    private class BulkReserveNetworkInputModel
    {
        [Required(ErrorMessage = "Networks are required")]
        public string Networks { get; set; } = string.Empty;
    }
}
