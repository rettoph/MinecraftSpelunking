@using MinecraftSpelunking.Common
@using System.Globalization

@typeparam T

@inject NavigationManager NavigationManager;

<nav aria-label="Page navigation">
    <ul class="pagination justify-content-center">
        <li class="page-item">
            <A2 class="@PrevClass" aria-label="Previous" OnClick="@(async (args) => await this.OnClick.InvokeAsync(1))">
                <span aria-hidden="true">&laquo;</span>
            </A2>
        </li>
        @foreach(PageNavOption option in this.Options)
        {
            <li class="page-item @option.Class">
                <A2 class="page-link" OnClick="@(async (args) => await this.OnClick.InvokeAsync(option.Number))">@option.Number.ToString("#,###")</A2>
            </li>
        }
        <li class="page-item">
            <A2 class="@NextClass" aria-label="Next" OnClick="@(async (args) => await this.OnClick.InvokeAsync(this.Page.Total))">
                <span aria-hidden="true">&raquo;</span>
            </A2>
        </li>
    </ul>
</nav>

@code {
    [Parameter]
    public required Page<T> Page { get; set; }

    [Parameter]
    public EventCallback<int> OnClick { get; set; }

    private string NextClass = string.Empty;
    private string PrevClass = string.Empty;
    private List<PageNavOption> Options = new List<PageNavOption>();

    protected override void OnInitialized()
    {
        base.OnInitialized();

        if (this.OnClick.HasDelegate == false)
        {
            this.OnClick = new EventCallback<int>(null, this.DefaultOnClick);
        }
        

        this.PrevClass = this.Page.Number <= 1 ? "page-link disabled" : "page-link";
        this.NextClass = this.Page.Number >= this.Page.Total ? "page-link disabled" : "page-link";

        int min = this.Page.Number - 5;
        int minOffset = 0;
        int max = this.Page.Number + 5;
        int maxOffset = 0;

        if(min < 1)
        {
            minOffset = 1 - min;
            min = 1;
        }

        if (max > this.Page.Total)
        {
            maxOffset = max - this.Page.Total;
            max = this.Page.Number;
        }

        min = Math.Max(1, min - maxOffset);
        max = Math.Min(this.Page.Total, max + minOffset);

        for (int i = min; i <= max; i++)
        {
            this.Options.Add(new PageNavOption()
            {
                Number = i,
                Class = i == this.Page.Number ? "active" : ""
            });
        }
    }

    private void DefaultOnClick(int number)
    {
        string newUri = this.NavigationManager.GetUriWithQueryParameter("page", number);
        this.NavigationManager.NavigateTo(newUri, true);
    }

    private class PageNavOption
    {
        public required int Number { get; init; }
        public required string Class { get; init; }
    }
}
