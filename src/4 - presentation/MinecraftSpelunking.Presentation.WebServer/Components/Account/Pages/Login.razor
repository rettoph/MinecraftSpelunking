@using Microsoft.AspNetCore.Identity
@using MinecraftSpelunking.Application.AspNetCore.Common.Dtos
@using MinecraftSpelunking.Application.AspNetCore.Common.Services
@using MinecraftSpelunking.Application.Identity.Common.Dtos
@using MinecraftSpelunking.Application.Identity.Common.Enums
@using MinecraftSpelunking.Application.Identity.Common.Services
@using MinecraftSpelunking.Domain.Identity.Common.Enums
@using MinecraftSpelunking.Presentation.WebServer.Attributes

@attribute [Route(Constants.Routes.Account.Login)]
@attribute [EnsureAdminUserExists(true)]

@inject IRedirectApplicationService Redirect;
@inject IUserApplicationService Users;
@inject IStatusMessageApplicationService StatusMessages;

<PageTitle>Login</PageTitle>

<h1>Login</h1>

<div class="row">
    <div class="col-md-4">
        <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="Submit" FormName="register">
            <DataAnnotationsValidator />
            <h2>Login to your account.</h2>
            <hr />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Email" class="form-control" autocomplete="email" aria-required="true" placeholder="name@example.com" />
                <label for="email">Email</label>
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <label for="password">Password</label>
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Login</button>
        </EditForm>
    </div>
</div>

@code {
    private SignInResultDto? Result;

    [SupplyParameterFromQuery]
    private string ReturnUrl { get; set; } = Constants.Routes.Home;

    [SupplyParameterFromForm]
    private LoginInputModel Input { get; set; } = new();

    public async Task Submit()
    {
        this.Result = await this.Users.TrySignInWithEmailAndPasswordAsync(this.Input.Email, this.Input.Password, true);

        switch(this.Result.Type)
        {
            case SignInResultTypeEnum.Failure:
                this.StatusMessages.Add(StatusMessageDto.Error("Unable to login, check your credentials and try again."));
                break;
            case SignInResultTypeEnum.Success:
                this.Redirect.RedirectTo(uri: this.ReturnUrl, statusMessage: StatusMessageDto.Success($"Welcome, {this.Result.User!.UserName}"));
                break;
            default:
                throw new NotImplementedException();
        }
    }
}
