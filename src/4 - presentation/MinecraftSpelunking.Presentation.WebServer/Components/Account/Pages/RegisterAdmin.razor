@using Microsoft.AspNetCore.Identity
@using MinecraftSpelunking.Application.AspNetCore.Common.Dtos
@using MinecraftSpelunking.Application.AspNetCore.Common.Services
@using MinecraftSpelunking.Application.Identity.Common.Dtos
@using MinecraftSpelunking.Application.Identity.Common.Services
@using MinecraftSpelunking.Domain.Identity.Common.Enums
@using MinecraftSpelunking.Presentation.WebServer.Attributes

@attribute [EnsureAdminUserExists(false)]
@attribute [Route(Constants.Routes.Account.RegisterAdmin)]

@inject IRedirectApplicationService Redirect;
@inject IUserApplicationService Users;
@inject IStatusMessageApplicationService StatusMessages;

<PageTitle>Register Admin Account</PageTitle>

<h1>Register Admin Account</h1>

<div class="row">
    <div class="col-md-4">
        <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="CreateAdminAccount" FormName="register">
            <DataAnnotationsValidator />
            <h2>Create primary admin account.</h2>
            <hr />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.UserName" class="form-control" autocomplete="username" aria-required="true" placeholder="Username" />
                <label for="username">Username</label>
                <ValidationMessage For="() => Input.UserName" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Email" class="form-control" autocomplete="email" aria-required="true" placeholder="name@example.com" />
                <label for="email">Email</label>
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <label for="password">Password</label>
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <label for="confirm-password">Confirm Password</label>
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Register</button>
        </EditForm>
    </div>
</div>

@code {
    private RegisterUserResultDto? Result;

    [SupplyParameterFromQuery]
    private string ReturnUrl { get; set; } = Constants.Routes.Home;

    [SupplyParameterFromForm]
    private RegisterAdminInputModel Input { get; set; } = new();

    public async Task CreateAdminAccount()
    {
        this.Result = await this.Users.RegisterUserAsync(this.Input.UserName, this.Input.Email, this.Input.Password, UserRoleTypeEnum.User, UserRoleTypeEnum.Admin);

        foreach (IdentityError error in this.Result.IdentityResult.Errors)
        {
            this.StatusMessages.Add(StatusMessageDto.Error(error.Description));
        }

        if(this.Result.IdentityResult.Succeeded == true)
        {
            this.Redirect.RedirectTo(uri: this.ReturnUrl, statusMessage: StatusMessageDto.Success("Account created succesfully!"));
        }
    }
}
